# Define files to include in chezmoi
# In this list, don't include globs, just files/directories
CHEZMOI_INCLUDE=(
  "$HOME/.gitconfig"
  "$HOME/.zsh"
  "$HOME/.zshrc"
  "$HOME/.config/nvim"
  "$HOME/.config/llm-orc"
  "$HOME/.config/starship.toml"
  "$HOME/.config/ghostty/config"
  "$HOME/.tmux.conf"
  "$HOME/.bashrc"
  "$HOME/.bash_profile"
  "$HOME/.zprofile"
  "$HOME/.zshenv"
  "$HOME/Brewfile"
)

# Define patterns to exclude
CHEZMOI_EXCLUDE=(
  "**/secrets.zsh"
  "**/.DS_Store"
  "**/.config/chezmoi/**"
  "**/node_modules/**"
  "**/.git/**"
  "**__pycache__**"
  "**.aider**"
)

function chezmoi_manage() {
  (
    # Check if chezmoi is installed
    local CHEZMOI_BIN=$(which chezmoi)
    if [ -z "$CHEZMOI_BIN" ]; then
      echo "Error: chezmoi is not installed or not in PATH."
      return 1
    fi

    # Get the source directory
    local SOURCE_DIR=$("$CHEZMOI_BIN" source-path)
    if [ -z "$SOURCE_DIR" ]; then
      echo "Error: Could not determine chezmoi source directory."
      return 1
    fi

    # Always regenerate the ignore file
    echo "Updating .chezmoiignore..."
    echo "# This file is automatically generated. Update ignore list in ~/.zsh/chezmoi.zsh" > "$SOURCE_DIR/.chezmoiignore"
    
    # Add our standard exclusion patterns
    for pattern in "${CHEZMOI_EXCLUDE[@]}"; do
      echo "$pattern" >> "$SOURCE_DIR/.chezmoiignore"
    done
    
    # Always include gitignore patterns
    echo "# Patterns from .gitignore files" >> "$SOURCE_DIR/.chezmoiignore"
    
    # Global gitignore
    if [ -f "$HOME/.gitignore_global" ]; then
      echo "# From global gitignore" >> "$SOURCE_DIR/.chezmoiignore"
      cat "$HOME/.gitignore_global" >> "$SOURCE_DIR/.chezmoiignore"
    fi
    
    # Local gitignore if it exists
    if [ -f "$HOME/.gitignore" ]; then
      echo "# From local gitignore" >> "$SOURCE_DIR/.chezmoiignore"
      cat "$HOME/.gitignore" >> "$SOURCE_DIR/.chezmoiignore"
    fi

    # Remove files that match the exclude patterns from chezmoi source
    echo "Removing excluded patterns from chezmoi..."
    for pattern in "${CHEZMOI_EXCLUDE[@]}"; do
      # Convert glob pattern to find pattern
      # Replace ** with * for the find command and escape the [ character in sed replacement
      local find_pattern=$(echo "$pattern" | sed -e 's/\*\*/*/g' -e 's/\*/[^\/]*/g')
      
      # Use find to locate matching files in source directory
      local excluded_files=$(find "$SOURCE_DIR" -path "$SOURCE_DIR/$find_pattern" 2>/dev/null)
      
      if [ ! -z "$excluded_files" ]; then
        echo "Found excluded files matching pattern: $pattern"
        echo "$excluded_files" | while read -r excluded_file; do
          if [ -e "$excluded_file" ]; then
            echo "Removing $excluded_file from chezmoi source"
            rm -rf "$excluded_file"
          fi
        done
      fi
    done

    # Add files to chezmoi
    echo "Adding files to chezmoi..."
    for path in "${CHEZMOI_INCLUDE[@]}"; do
      # Remove trailing slashes if any
      path="${path%/}"
      
      if [ -e "$path" ]; then
        echo "Adding $path"
        # For directories, add -r for recursive
        if [ -d "$path" ]; then
          "$CHEZMOI_BIN" add -r "$path"
        else
          "$CHEZMOI_BIN" add "$path"
        fi
      else
        echo "Skipping $path (not found)"
      fi
    done

    echo "✅ Done! To see changes, run: chezmoi status"
  )
}

# Function to check git status of chezmoi source directory
function chezmoi_git_status() {
  # Store the full path to chezmoi
  local CHEZMOI_BIN=$(which chezmoi)
  
  # Check if chezmoi is installed
  if [ -z "$CHEZMOI_BIN" ]; then
    echo "Error: chezmoi is not installed or not in PATH."
    return 1
  fi

  # Get the source directory
  local SOURCE_DIR=$("$CHEZMOI_BIN" source-path)
  if [ -z "$SOURCE_DIR" ]; then
    echo "Error: Could not determine chezmoi source directory."
    return 1
  fi

  echo "Checking git status in $SOURCE_DIR..."
  
  # Check if the source directory is a git repository
  if [ ! -d "$SOURCE_DIR/.git" ]; then
    echo "Error: $SOURCE_DIR is not a git repository."
    return 1
  fi
  
  # Navigate to the source directory and run git status
  (cd "$SOURCE_DIR" && git status)
}

# Function to commit and push changes from chezmoi source directory
function chezmoi_git_sync() {
  # Store the full path to chezmoi
  local CHEZMOI_BIN=$(which chezmoi)
  
  # Check if chezmoi is installed
  if [ -z "$CHEZMOI_BIN" ]; then
    echo "Error: chezmoi is not installed or not in PATH."
    return 1
  fi

  # Get the source directory
  local SOURCE_DIR=$("$CHEZMOI_BIN" source-path)
  if [ -z "$SOURCE_DIR" ]; then
    echo "Error: Could not determine chezmoi source directory."
    return 1
  fi 
  
  # Check if the source directory is a git repository
  if [ ! -d "$SOURCE_DIR/.git" ]; then
    echo "Error: $SOURCE_DIR is not a git repository."
    return 1
  fi
  
  # Navigate to the source directory
  cd "$SOURCE_DIR" || return 1
  
  # Check if there are changes to commit
  if [ -z "$(git status --porcelain)" ]; then
    echo "No changes to commit in $SOURCE_DIR"
    return 0
  fi
  
  # Check for untracked files and offer to add them
  local UNTRACKED_FILES=$(git ls-files --others --exclude-standard)
  if [ ! -z "$UNTRACKED_FILES" ]; then
    echo "Untracked files detected:"
    echo "$UNTRACKED_FILES" | sed 's/^/  /'
    echo -n "Do you want to add these untracked files? (y/n): "
    read add_untracked
    if [[ $add_untracked == [yY] || $add_untracked == [yY][eE][sS] ]]; then
      echo "Adding untracked files..."
      git add $(echo "$UNTRACKED_FILES" | tr '\n' ' ')
    else
      echo "Skipping untracked files."
    fi
  fi
  
  # Get commit message from argument or use default
  local COMMIT_MSG=${1:-"Update dotfiles $(date +%Y-%m-%d)"}
  
  echo "Committing changes with message: $COMMIT_MSG"
  git add -u
  git commit -m "$COMMIT_MSG"
  
  # Push changes
  echo "Pushing changes to remote repository..."
  git push
  
  # Return to original directory
  cd - > /dev/null
  
  echo "✅ Changes pushed successfully!"
}

#
# Function to fetch latest changes from remote chezmoi repository
function chezmoi_fetch() {
  local CHEZMOI_BIN=$(which chezmoi)
  
  # Check if chezmoi is installed
  if [ -z "$CHEZMOI_BIN" ]; then
    echo "Error: chezmoi is not installed or not in PATH."
    return 1
  fi

  # Get the source directory
  local SOURCE_DIR=$("$CHEZMOI_BIN" source-path)
  if [ -z "$SOURCE_DIR" ]; then
    echo "Error: Could not determine chezmoi source directory."
    return 1
  fi
  
  # Check if the source directory is a git repository
  if [ ! -d "$SOURCE_DIR/.git" ]; then
    echo "Error: $SOURCE_DIR is not a git repository."
    return 1
  fi
  
  echo "Fetching latest changes from remote repository..."
  (cd "$SOURCE_DIR" && git pull)
  
  echo "✅ Latest changes fetched successfully!"
}

# Function to apply the latest chezmoi configuration
function chezmoi_apply() {
  local CHEZMOI_BIN=$(which chezmoi)
  
  # Check if chezmoi is installed
  if [ -z "$CHEZMOI_BIN" ]; then
    echo "Error: chezmoi is not installed or not in PATH."
    return 1
  fi
  
  echo "Applying latest chezmoi configuration..."
  "$CHEZMOI_BIN" apply
  
  echo "✅ Configuration applied successfully!"
}

# Function to sync to chezmoi local repo and  push to remote
function chezmoi_push() {
  echo "===== Chezmoi Sync and Push to Remote ====="
  
  # Step 1: Manage files
  echo "Step 1: Add files to chezmoi"
  echo -n "Do you want to add files to chezmoi? (y/n): "
  read confirm
  if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    chezmoi_manage
  else
    echo "Skipping file management step."
  fi
  
  # Step 2: Show git status
  echo "Step 2: Check git status"
  echo -n "Do you want to check git status? (y/n): "
  read confirm
  if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    chezmoi_git_status
    
    # Step 2b: Check for untracked files and offer to add them
    local CHEZMOI_BIN=$(which chezmoi)
    local SOURCE_DIR=$("$CHEZMOI_BIN" source-path)
    
    local UNTRACKED_FILES=$(cd "$SOURCE_DIR" && git ls-files --others --exclude-standard)
    if [ ! -z "$UNTRACKED_FILES" ]; then
      echo "Untracked files detected:"
      echo "$UNTRACKED_FILES" | sed 's/^/  /'
      echo -n "Do you want to add these untracked files? (y/n): "
      read add_untracked
      if [[ $add_untracked == [yY] || $add_untracked == [yY][eE][sS] ]]; then
        echo "Adding untracked files..."
        (cd "$SOURCE_DIR" && git add $(echo "$UNTRACKED_FILES" | tr '\n' ' '))
        echo "Untracked files added successfully."
      else
        echo "Skipping untracked files."
      fi
    fi
  else
    echo "Skipping git status step."
  fi
  
  # Step 3: Check for remote changes before pushing
  echo "Step 3: Check for remote changes"
  echo -n "Do you want to check for remote changes before pushing? (y/n): "
  read confirm
  if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    # Get the source directory
    local CHEZMOI_BIN=$(which chezmoi)
    local SOURCE_DIR=$("$CHEZMOI_BIN" source-path)
    
    echo "Checking for remote changes..."
    (cd "$SOURCE_DIR" && git fetch)
    
    # Check if we're behind remote
    local BEHIND_COUNT=$(cd "$SOURCE_DIR" && git rev-list --count HEAD..@{upstream} 2>/dev/null)
    if [ -n "$BEHIND_COUNT" ] && [ "$BEHIND_COUNT" -gt 0 ]; then
      echo "⚠️  Your local repository is behind the remote by $BEHIND_COUNT commit(s)."
      echo "You should merge remote changes before pushing to avoid conflicts."
      echo "Options:"
      echo "1. Pull remote changes and merge (recommended)"
      echo "2. Continue without merging (may cause conflicts later)"
      echo -n "Choose an option (1/2): "
      read merge_option
      
      if [ "$merge_option" = "1" ]; then
        echo "Pulling remote changes..."
        (cd "$SOURCE_DIR" && git pull)
        if [ $? -ne 0 ]; then
          echo "⚠️  Merge conflicts detected. Please resolve conflicts manually."
          echo "After resolving conflicts, run: (cd \"$SOURCE_DIR\" && git add . && git commit)"
          return 1
        fi
        echo "Remote changes merged successfully."
      else
        echo "Proceeding without merging remote changes."
      fi
    else
      echo "Your local repository is up-to-date with remote."
    fi
  else
    echo "Skipping remote check step."
  fi
  
  # Step 4: Sync changes
  echo "Step 4: Commit and push changes"
  echo -n "Do you want to commit and push changes? (y/n): "
  read confirm
  if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    # Get commit message
    local COMMIT_MSG="Update dotfiles $(date +%Y-%m-%d)"
    echo -n "Enter commit message (default: \"$COMMIT_MSG\"): "
    read custom_msg
    if [ ! -z "$custom_msg" ]; then
      COMMIT_MSG="$custom_msg"
    fi
    
    # Use our modified git sync function with the commit message
    (cd "$SOURCE_DIR" && git add -u && git commit -m "$COMMIT_MSG" && git push)
    echo "✅ Changes pushed successfully!"
  else
    echo "Skipping git sync step."
  fi
  
  echo "✅ Chezmoi workflow completed!"
}

# Function to sync from remote and apply changes
function chezmoi_pull() {
  echo "===== Chezmoi Pull from Remote and Sync ====="
  
  # Step 1: Fetch latest changes
  echo "Step 1: Fetch latest changes from remote"
  echo -n "Do you want to fetch the latest changes? (y/n): "
  read confirm
  if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    chezmoi_fetch
  else
    echo "Skipping fetch step."
  fi

  # Get the source directory
  local CHEZMOI_BIN=$(which chezmoi)
  local SOURCE_DIR=$("$CHEZMOI_BIN" source-path)
  
  # Step 2: Check for local changes
  echo "Step 2: Check for local changes"
  local HAS_LOCAL_CHANGES=false
  if [ -n "$(cd "$SOURCE_DIR" && git status --porcelain)" ]; then
    echo "Local changes detected in chezmoi source directory."
    echo "These changes need to be merged with remote changes."
    HAS_LOCAL_CHANGES=true
  else
    echo "No local changes detected."
  fi
  
  # Step 3: Handle potential merge conflicts
  if [ "$HAS_LOCAL_CHANGES" = true ]; then
    echo "Step 3: Merge local and remote changes"
    echo "The following strategies are available:"
    echo "1. Stash local changes, pull remote, then apply stash (safest)"
    echo "2. Commit local changes, then merge (standard git workflow)"
    echo "3. Continue without merging (not recommended if conflicts exist)"
    echo -n "Choose a merge strategy (1/2/3): "
    read merge_option
    
    case $merge_option in
      1)
        echo "Stashing local changes..."
        (cd "$SOURCE_DIR" && git stash)
        echo "Pulling remote changes..."
        (cd "$SOURCE_DIR" && git pull)
        echo "Applying stashed changes..."
        (cd "$SOURCE_DIR" && git stash pop)
        if [ $? -ne 0 ]; then
          echo "⚠️  Merge conflicts detected. Please resolve conflicts manually."
          echo "After resolving conflicts, run: (cd \"$SOURCE_DIR\" && git add . && git commit -m \"Resolve merge conflicts\")"
          return 1
        fi
        ;;
      2)
        echo "Committing local changes..."
        local commit_msg="Local changes before merge $(date +%Y-%m-%d)"
        (cd "$SOURCE_DIR" && git add . && git commit -m "$commit_msg")
        echo "Merging remote changes..."
        (cd "$SOURCE_DIR" && git pull)
        if [ $? -ne 0 ]; then
          echo "⚠️  Merge conflicts detected. Please resolve conflicts manually."
          echo "After resolving conflicts, run: (cd \"$SOURCE_DIR\" && git add . && git commit)"
          return 1
        fi
        ;;
      3)
        echo "Proceeding without merging."
        ;;
      *)
        echo "Invalid option. Aborting."
        return 1
        ;;
    esac
  fi
  
  # Step 4: Apply configuration
  echo "Step 4: Apply configuration changes"
  echo -n "Do you want to apply the configuration changes? (y/n): "
  read confirm
  if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    chezmoi_apply
  else
    echo "Skipping apply step."
  fi
  
  echo "✅ Chezmoi sync from remote completed!"
}
